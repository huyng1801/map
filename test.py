import xml.etree.ElementTree as ET
import folium
import re
import os
import time
import base64

# === C·∫•u h√¨nh t√™n file GPX v√† HTML ===
gpx_file = "duong_di.gpx"   # ƒë·ªïi t√™n file gpx c·ªßa b·∫°n t·∫°i ƒë√¢y
output_html = "ban_do_day_du.html"

# === Load file GPX v√† namespace ===
tree = ET.parse(gpx_file)
root = tree.getroot()

ns = {
    'gpx': 'http://www.topografix.com/GPX/1/1',
    'geotracker': 'http://ilyabogdanovich.com/gpx/extensions/geotracker'
}

# === 1. L·ªçc c√°c ƒëi·ªÉm d·ª´ng >= 10 ph√∫t ===
waypoints = []
for wpt in root.findall('gpx:wpt', ns):
    name = wpt.find('gpx:name', ns)
    if name is not None and "Stop for ~" in name.text:
        match = re.search(r'Stop for ~(\d+)', name.text)
        if match:
            minutes = int(match.group(1))
            if minutes >= 20:
                lat = float(wpt.attrib['lat'])
                lon = float(wpt.attrib['lon'])
                ele = wpt.findtext('gpx:ele', default='0', namespaces=ns)
                time = wpt.findtext('gpx:time', default='', namespaces=ns)
                desc = wpt.findtext('gpx:desc', default='', namespaces=ns)
                waypoints.append({
                    'lat': lat,
                    'lon': lon,
                    'name': name.text,
                    'time': time,
                    'ele': float(ele),
                    'desc': desc
                })

# === 2. L·∫•y c√°c ƒëi·ªÉm di chuy·ªÉn t·ª´ <trkpt> ƒë·ªÉ v·∫Ω ƒë∆∞·ªùng ===
track_points = []
for trk in root.findall('gpx:trk', ns):
    for trkseg in trk.findall('gpx:trkseg', ns):
        for trkpt in trkseg.findall('gpx:trkpt', ns):
            lat = float(trkpt.attrib['lat'])
            lon = float(trkpt.attrib['lon'])
            track_points.append((lat, lon))

# === 3. T·∫°o b·∫£n ƒë·ªì Folium ===
if waypoints:
    center = [waypoints[0]['lat'], waypoints[0]['lon']]
elif track_points:
    center = track_points[len(track_points) // 2]
else:
    center = [0, 0]

m = folium.Map(
    location=center, 
    zoom_start=6.5,
    tiles='OpenStreetMap',
    zoom_control=True,
    scrollWheelZoom=True,
    dragging=True,
    tap=True,
    tap_tolerance=15,
    world_copy_jump=False,
    close_popup_on_click=True,
    bounce_at_zoom_limits=True,
    keyboard=True,
    keyboard_pan_offset=80,
    keyboard_zoom_offset=1,
    zoom_delta=0.5,
    zoom_snap=0.5,
    prefer_canvas=True,  # T·ªëi ∆∞u rendering
    crs='EPSG3857'  # ƒê·∫£m b·∫£o projection ƒë√∫ng
)

# === 4. V·∫Ω ƒë∆∞·ªùng di chuy·ªÉn (polyline) ===
if track_points:
    folium.PolyLine(
        track_points, 
        color="blue", 
        weight=4,  # TƒÉng ƒë·ªô d√†y ƒë·ªÉ r√µ h∆°n
        opacity=0.9,
        smoothFactor=1.0,  # T·ªëi ∆∞u smooth
        noClip=False  # ƒê·∫£m b·∫£o kh√¥ng b·ªã clip
    ).add_to(m)

# === 5. Th√™m marker c√°c ƒëi·ªÉm d·ª´ng >= 10p ===
for wp in waypoints:
    # X·ª≠ l√Ω th·ªùi gian
    time_str = wp['time'].replace('T', ' ').replace('Z', '') if wp['time'] else 'Kh√¥ng r√µ'
    
    # X·ª≠ l√Ω chi ti·∫øt
    desc_lines = wp['desc'].split('\n') if wp['desc'] else []
    formatted_desc = ""
    for line in desc_lines:
        if 'Elevation:' in line:
            formatted_desc += f"üèîÔ∏è ƒê·ªô cao: {line.split(':')[1].strip()}<br>"
        elif 'Time from start:' in line:
            formatted_desc += f"‚è±Ô∏è Th·ªùi gian t·ª´ l√∫c b·∫Øt ƒë·∫ßu: {line.split(':')[1].strip()}<br>"
        elif 'Distance from start:' in line:
            formatted_desc += f"üìç Kho·∫£ng c√°ch t·ª´ ƒëi·ªÉm xu·∫•t ph√°t: {line.split(':')[1].strip()}<br>"
    
    popup_html = f"""
    <div style="font-family: Arial, sans-serif; line-height: 1.4;">
        <h4 style="margin: 0 0 10px 0; color: #d63031;">üõë {wp['name'].replace('Stop for ~', 'D·ª´ng kho·∫£ng ').replace(' min', ' ph√∫t')}</h4>
        <div style="margin: 5px 0;">
            <strong>üïê Th·ªùi gian:</strong> {time_str}
        </div>
        <div style="margin: 5px 0;">
            <strong>üìè ƒê·ªô cao:</strong> {wp['ele']:.1f} m
        </div>
        <div style="margin: 10px 0; padding: 8px; background-color: #f8f9fa; border-radius: 4px; font-size: 12px;">
            {formatted_desc}
        </div>
    </div>
    """
    folium.Marker(
        location=(wp['lat'], wp['lon']),
        popup=folium.Popup(popup_html, max_width=300),
        icon=folium.Icon(
            color='red',
            icon='stop-circle',
            prefix='fa',
            icon_color='white'
        )
    ).add_to(m)

# === 6. L∆∞u ra file HTML ===
m.save(output_html)
print(f"‚úÖ ƒê√£ t·∫°o b·∫£n ƒë·ªì HTML c√≥ c·∫£ tuy·∫øn ƒë∆∞·ªùng: {output_html}")

# === 7. Th√™m ch·ª©c nƒÉng xu·∫•t ·∫£nh JPG ===
def add_export_image_feature():
    """Th√™m ch·ª©c nƒÉng xu·∫•t ·∫£nh v√†o HTML"""
    
    # ƒê·ªçc file HTML ƒë√£ t·∫°o
    with open(output_html, 'r', encoding='utf-8') as f:
        html_content = f.read()
    
    # JavaScript v√† CSS cho xu·∫•t ·∫£nh
    export_script = """
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script>
window.onload = function() {
    setTimeout(function() {
        // ƒê·ª£i map ho√†n to√†n s·∫µn s√†ng
        if (typeof window[Object.keys(window).find(key => key.startsWith('map_'))] !== 'undefined') {
            console.log('üó∫Ô∏è Map ƒë√£ t·∫£i xong, s·∫µn s√†ng xu·∫•t ·∫£nh');
        }
        
        // T·∫°o container cho n√∫t xu·∫•t
        var buttonContainer = document.createElement('div');
        buttonContainer.style.position = 'fixed';
        buttonContainer.style.top = '10px';
        buttonContainer.style.right = '10px';
        buttonContainer.style.zIndex = '9999';
        buttonContainer.style.display = 'flex';
        buttonContainer.style.flexDirection = 'column';
        buttonContainer.style.gap = '5px';
        
        // N√∫t xu·∫•t JPG ch·∫•t l∆∞·ª£ng cao
        var exportJpgBtn = document.createElement('button');
        exportJpgBtn.innerHTML = 'üì∏ Xu·∫•t JPG Si√™u N√©t';
        exportJpgBtn.style.padding = '12px 16px';
        exportJpgBtn.style.fontSize = '14px';
        exportJpgBtn.style.backgroundColor = '#28a745';
        exportJpgBtn.style.color = 'white';
        exportJpgBtn.style.border = 'none';
        exportJpgBtn.style.borderRadius = '5px';
        exportJpgBtn.style.cursor = 'pointer';
        exportJpgBtn.style.boxShadow = '0 3px 6px rgba(0,0,0,0.2)';
        exportJpgBtn.style.fontWeight = 'bold';
        
        // H√†m xu·∫•t ·∫£nh JPG
        function exportImage() {
            var originalText = exportJpgBtn.innerHTML;
            
            exportJpgBtn.innerHTML = '‚è≥ ƒêang xu·∫•t...';
            exportJpgBtn.disabled = true;
            
            // C·∫•u h√¨nh ch·∫•t l∆∞·ª£ng ph√π h·ª£p
            var options = {
                scale: 1.0,  // Scale 1:1 kh√¥ng nh√¢n l√™n
                useCORS: true,
                allowTaint: true,
                backgroundColor: '#ffffff',
                width: window.innerWidth,   // D√πng k√≠ch th∆∞·ªõc window
                height: window.innerHeight,
                logging: false,
                removeContainer: false,
                onclone: function(clonedDoc) {
                    // ·∫®n n√∫t export trong clone
                    var container = clonedDoc.querySelector('[data-export-container]');
                    if (container) container.style.display = 'none';
                    
                    // ƒê·∫£m b·∫£o map render ƒë√∫ng
                    var mapDiv = clonedDoc.querySelector('.leaflet-container');
                    if (mapDiv) {
                        mapDiv.style.transform = 'none';
                        mapDiv.style.position = 'relative';
                    }
                }
            };
            
            html2canvas(document.body, options).then(function(canvas) {
                // T·∫°o filename v·ªõi timestamp
                var now = new Date();
                var timestamp = now.getFullYear() + 
                    String(now.getMonth() + 1).padStart(2, '0') + 
                    String(now.getDate()).padStart(2, '0') + '_' +
                    String(now.getHours()).padStart(2, '0') + 
                    String(now.getMinutes()).padStart(2, '0');
                
                var filename = 'ban_do_viet_nam_' + timestamp + '.jpg';
                
                // T·∫°o link download
                var link = document.createElement('a');
                link.download = filename;
                link.href = canvas.toDataURL('image/jpeg', 0.95);
                
                // Trigger download
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                // Reset button
                exportJpgBtn.innerHTML = '‚úÖ ƒê√£ xu·∫•t xong!';
                setTimeout(function() {
                    exportJpgBtn.innerHTML = originalText;
                    exportJpgBtn.disabled = false;
                }, 2000);
                
                console.log('üìÅ ƒê√£ xu·∫•t: ' + filename);
                console.log('üìê K√≠ch th∆∞·ªõc: ' + canvas.width + 'x' + canvas.height + ' pixels');
                
            }).catch(function(error) {
                console.error('Export error:', error);
                exportJpgBtn.innerHTML = '‚ùå L·ªói xu·∫•t';
                setTimeout(function() {
                    exportJpgBtn.innerHTML = originalText;
                    exportJpgBtn.disabled = false;
                }, 3000);
            });
        }
        
        // S·ª± ki·ªán click
        exportJpgBtn.onclick = exportImage;
        
        // Th√™m n√∫t v√†o container
        buttonContainer.appendChild(exportJpgBtn);
        buttonContainer.setAttribute('data-export-container', 'true');
        
        document.body.appendChild(buttonContainer);
        
        console.log('üéØ B·∫£n ƒë·ªì s·∫µn s√†ng! Nh·∫•n n√∫t "Xu·∫•t JPG Si√™u N√©t" ƒë·ªÉ t·∫£i ·∫£nh.');
        
    }, 3000);  // TƒÉng th·ªùi gian ch·ªù ƒë·ªÉ map load ho√†n to√†n
};

// Th√™m CSS t·ªëi ∆∞u
var style = document.createElement('style');
style.textContent = `
    /* T·ªëi ∆∞u cho xu·∫•t ·∫£nh */
    body {
        margin: 0;
        padding: 0;
        background: white;
    }
    
    /* ·∫®n attribution khi xu·∫•t */
    .leaflet-control-attribution {
        font-size: 10px !important;
        background: rgba(255, 255, 255, 0.8) !important;
    }
    
    /* Hover effect cho n√∫t */
    [data-export-container] button:hover {
        transform: translateY(-2px);
        transition: all 0.2s ease;
    }
    
    [data-export-container] button:active {
        transform: translateY(0);
    }
`;
document.head.appendChild(style);
</script>

<style>
/* CSS b·ªï sung cho giao di·ªán ƒë·∫πp */
.leaflet-container {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* T·ªëi ∆∞u popup */
.leaflet-popup-content {
    margin: 8px 12px !important;
}

.leaflet-popup-content h4 {
    margin-top: 0 !important;
}
</style>
"""
    
    # Th√™m script v√†o HTML
    html_content = html_content.replace('</body>', export_script + '</body>')
    
    # Ghi l·∫°i file HTML
    with open(output_html, 'w', encoding='utf-8') as f:
        f.write(html_content)

# Th·ª±c thi th√™m ch·ª©c nƒÉng xu·∫•t ·∫£nh
add_export_image_feature()

print("üéâ ƒê√£ th√™m ch·ª©c nƒÉng xu·∫•t ·∫£nh!")
print("üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:")
print("   1. M·ªü file HTML b·∫±ng tr√¨nh duy·ªát")
print("   2. ƒê·ª£i b·∫£n ƒë·ªì t·∫£i xong (3 gi√¢y)")
print("   3. Nh·∫•n n√∫t 'üì∏ Xu·∫•t JPG Si√™u N√©t' ·ªü g√≥c ph·∫£i")
print("   4. ·∫¢nh JPG s·∫Ω t·ª± ƒë·ªông t·∫£i v·ªÅ v·ªõi timestamp")
print("   5. ƒê·ªô ph√¢n gi·∫£i: Theo k√≠ch th∆∞·ªõc c·ª≠a s·ªï tr√¨nh duy·ªát")
print("üí° L∆∞u √Ω: N·∫øu ƒë∆∞·ªùng v·∫Ω v·∫´n l·ªách, h√£y zoom/pan b·∫£n ƒë·ªì tr∆∞·ªõc khi xu·∫•t")
